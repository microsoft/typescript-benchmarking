# This pipeline handles all TypeScript benchmarking. Supported situations are:
#
# - Pushes to microsoft/TypeScript's main branch. This is triggered indirectly
#   via the ts-main-pipeline resource. In this situation, BuildReason will be
#   ResourceTrigger, and we will upload the results to the blob store.
# - On manual trigger via the API, with a payload like:
#   {
#     "resources": {
#       "repositories": {
#         "TypeScript": { "refName": "refs/heads/main", "version": "<commit hash>" }
#       }
#     },
#     "templateParameters": {
#       "HISTORICAL_RUN": true
#     }
#   }
#   In this situation, we'll treat this as a backfill run on main and upload
#   the results to the blob store. This also works for refs/heads/release-*.
# - On manual trigger via the API, with a payload like:
#   {
#     "resources": {
#       "repositories": {
#         "TypeScript": { "refName": "refs/pull/<number>/merge" }
#       }
#     }
#   }
#   In this situation, we'll treat this as a PR run, comparing the pull request
#   against its merge base with main. Its results will be published back to the
#   pull request as a comment. Note that this payload is not one that the UI
#   supports, but it's possible to manually trigger it via the API, in which
#   case the UI will properly render all details about the resources.

pr: none
trigger: none

resources:
  # Note that the repository identifiers are known to external callers; don't
  # change them without ensuring everything is updated.
  repositories:
    - repository: TypeScript
      type: github
      endpoint: Microsoft
      name: microsoft/TypeScript

  # https://stackoverflow.com/a/63276774
  pipelines:
    - pipeline: ts-main-pipeline
      source: 'TypeScript pipeline trigger'
      trigger:
        branches:
          include:
            - main
            - release-*

parameters:
  # TODO(jakebailey): allow custom preset
  - name: TSPERF_PRESET
    displayName: Preset
    # Note: keep this up to date with generateMatrix and https://github.com/microsoft/typescript-bot-test-triggerer
    values:
      - baseline
      - regular
      - full
      - tsc-only
      - faster
      - bun
      - vscode
      - public
    default: baseline # Branch pushes use the defaults, so this is set to the preset we want to baseline.

  - name: HISTORICAL_RUN
    displayName: This is a historical run (only check this if you know what you're doing)
    type: boolean
    default: false

  # PR trigger params
  - name: DISTINCT_ID
    displayName: Distinct ID for this run (PR runs only)
    type: string
    default: ''
  - name: REQUESTING_USER
    displayName: User to tag when the results are ready (PR runs only)
    type: string
    default: '«anyone?»'
  - name: SOURCE_ISSUE
    displayName: PR ID in github (PR runs only)
    type: number
    default: 0
  - name: STATUS_COMMENT
    displayName: typescript-bot comment ID indicating that the run started (PR runs only)
    type: number
    default: 0

  # Keep in sync with inventory.yml and generateMatrix.ts.
  - name: AGENTS
    displayName: Exhaustive list of agents
    type: string
    default: 'any,ts-perf1,ts-perf2,ts-perf3,ts-perf4,ts-perf5,ts-perf6,ts-perf7,ts-perf8,ts-perf9,ts-perf10,ts-perf11,ts-perf12'

variables:
  Codeql.Enabled: false
  skipComponentGovernanceDetection: true

  CI: true

  azureSubscription: 'TypeScript Public CI'
  KeyVaultName: 'jststeam-passwords'

  REF: $[ resources.repositories['TypeScript'].ref ]
  PRETTY_REF: $[ replace(replace(replace(replace(variables['REF'], '/merge', ''), 'refs/pull/', 'pr.'), 'refs/heads/', ''), '/', '_') ]
  IS_PR: $[ startsWith(variables['REF'], 'refs/pull/') ]
  # True if this run should demand a baseline machine.
  USE_BASELINE_MACHINE: $[ or(eq(variables['Build.Reason'], 'ResourceTrigger'), ${{ parameters.HISTORICAL_RUN }}) ]
  # Only upload if the provided ref is explicitly main/release-* and we've run on the baseline machine.
  # This means that main pushes will automatically upload, but we can still queue builds off of main with a specific commit in the API.
  SHOULD_UPLOAD: $[ and(or(eq(variables['REF'], 'refs/heads/main'), startsWith(variables['REF'], 'refs/heads/release-')), eq(variables['USE_BASELINE_MACHINE'], 'true')) ]
  # This is a hack to emulate a ternary operator.
  # https://github.com/microsoft/azure-pipelines-yaml/issues/256#issuecomment-824121862
  # Since this is annoying, here's a playground to help generate them: https://tsplay.dev/wO2DRW
  PRETTY_SUFFIX: $[ replace(replace(eq(variables['SHOULD_UPLOAD'], 'true'), True, replace(replace(eq(variables['Build.Reason'], 'ResourceTrigger'), True, '-push'), False, '-historical')), False, '') ]

name: $(PRETTY_REF)$(PRETTY_SUFFIX)-$(Date:yyyyMMdd).$(Rev:r)
# Hide the commit message from the run name; it'll just always say that the
# build came from the benchmarking repo's commit.
appendCommitMessageToRunName: false

jobs:
  - job: Setup
    pool:
      vmImage: ubuntu-latest
    workspace:
      clean: all # Always start with a clean slate.

    variables:
      ARTIFACTS_DIR: $(Pipeline.Workspace)/artifacts

    steps:
      - template: templates/setup.yml
      - template: templates/cloneAndBuildBenchmarkRepo.yml # Sets $(BENCH_SCRIPTS), $(TSPERF_EXE)

      - task: AzureCLI@2
        inputs:
          azureSubscription: TsPerfStorage
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: 'node $(BENCH_SCRIPTS)/identityTest.js'
        name: Test identity
